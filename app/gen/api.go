// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// CheckRootResponse defines model for checkRootResponse.
type CheckRootResponse struct {
	// EchoQuery クエリのエコー
	EchoQuery string `json:"echoQuery"`

	// SimpleMessage シンプルなメッセージ
	SimpleMessage string `json:"simpleMessage"`

	// Timestamp レスポンスタイムスタンプ
	Timestamp time.Time `json:"timestamp"`
}

// GetUserIdListResponse defines model for getUserIdListResponse.
type GetUserIdListResponse struct {
	// Total 合計ユーザー数
	Total *int `json:"total,omitempty"`

	// UserIdList ユーザーID
	UserIdList []int `json:"userIdList"`
}

// GetUserNameListResponse defines model for getUserNameListResponse.
type GetUserNameListResponse struct {
	// Total 合計ユーザー数
	Total *int `json:"total,omitempty"`

	// UserNameList ユーザー名リスト
	UserNameList []string `json:"userNameList"`
}

// SignUpResponse defines model for signUpResponse.
type SignUpResponse struct {
	// EchoQuery クエリのエコー
	EchoQuery string `json:"echoQuery"`

	// SimpleMessage シンプルなメッセージ
	SimpleMessage string `json:"simpleMessage"`

	// Timestamp レスポンスタイムスタンプ
	Timestamp time.Time `json:"timestamp"`
}

// CheckRootRequest defines model for checkRootRequest.
type CheckRootRequest = string

// GetUserIdListRequest defines model for getUserIdListRequest.
type GetUserIdListRequest = int

// GetUserNameListRequest defines model for getUserNameListRequest.
type GetUserNameListRequest = int

// SignUpRequest defines model for signUpRequest.
type SignUpRequest = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	// Details バリデーションエラーの詳細
	Details *[]struct {
		// Field エラーのあるフィールド名
		Field *string `json:"field,omitempty"`

		// Message 具体的なエラー内容
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Error エラーメッセージ
	Error string `json:"error"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// CheckRootParams defines parameters for CheckRoot.
type CheckRootParams struct {
	// SampleQuery サンプルクエリ
	SampleQuery *CheckRootRequest `form:"sampleQuery,omitempty" json:"sampleQuery,omitempty"`
}

// SignUpParams defines parameters for SignUp.
type SignUpParams struct {
	// SampleQuery サンプルクエリ
	SampleQuery *SignUpRequest `form:"sampleQuery,omitempty" json:"sampleQuery,omitempty"`
}

// GetUserIdListParams defines parameters for GetUserIdList.
type GetUserIdListParams struct {
	// Limit 取得するユーザー数の上限
	Limit *GetUserIdListRequest `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUserNameListParams defines parameters for GetUserNameList.
type GetUserNameListParams struct {
	// Limit 取得するユーザー数の上限
	Limit *GetUserNameListRequest `form:"limit,omitempty" json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ルートエンドポイント
	// (GET /)
	CheckRoot(w http.ResponseWriter, r *http.Request, params CheckRootParams)
	// ユーザーのサインアップ
	// (GET /signUp)
	SignUp(w http.ResponseWriter, r *http.Request, params SignUpParams)
	// ユーザーIDリスト取得
	// (GET /userIdList)
	GetUserIdList(w http.ResponseWriter, r *http.Request, params GetUserIdListParams)
	// ユーザー名リスト取得
	// (GET /userNameList)
	GetUserNameList(w http.ResponseWriter, r *http.Request, params GetUserNameListParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// ルートエンドポイント
// (GET /)
func (_ Unimplemented) CheckRoot(w http.ResponseWriter, r *http.Request, params CheckRootParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザーのサインアップ
// (GET /signUp)
func (_ Unimplemented) SignUp(w http.ResponseWriter, r *http.Request, params SignUpParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザーIDリスト取得
// (GET /userIdList)
func (_ Unimplemented) GetUserIdList(w http.ResponseWriter, r *http.Request, params GetUserIdListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザー名リスト取得
// (GET /userNameList)
func (_ Unimplemented) GetUserNameList(w http.ResponseWriter, r *http.Request, params GetUserNameListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CheckRoot operation middleware
func (siw *ServerInterfaceWrapper) CheckRoot(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckRootParams

	// ------------- Optional query parameter "sampleQuery" -------------

	err = runtime.BindQueryParameter("form", true, false, "sampleQuery", r.URL.Query(), &params.SampleQuery)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sampleQuery", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckRoot(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SignUp operation middleware
func (siw *ServerInterfaceWrapper) SignUp(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SignUpParams

	// ------------- Optional query parameter "sampleQuery" -------------

	err = runtime.BindQueryParameter("form", true, false, "sampleQuery", r.URL.Query(), &params.SampleQuery)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sampleQuery", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignUp(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserIdListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserIdList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserNameList operation middleware
func (siw *ServerInterfaceWrapper) GetUserNameList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserNameListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserNameList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.CheckRoot)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/signUp", wrapper.SignUp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/userIdList", wrapper.GetUserIdList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/userNameList", wrapper.GetUserNameList)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
