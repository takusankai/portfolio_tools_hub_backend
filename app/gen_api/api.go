// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/takusankai/portfolio_tools_hub_backend/app/gen_api/responses"
)

// UsersUser defines model for users_User.
type UsersUser struct {
	// Email メールアドレス
	Email openapi_types.Email `json:"email"`

	// Id ユーザーID
	Id string `json:"id"`

	// Username ユーザー名
	Username string `json:"username"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	// Details バリデーションエラーの詳細
	Details *[]struct {
		// Field エラーのあるフィールド名
		Field *string `json:"field,omitempty"`

		// Message 具体的なエラー内容
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Error エラーメッセージ
	Error string `json:"error"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ルートエンドポイント
	// (GET /)
	GetRoot(w http.ResponseWriter, r *http.Request)
	// ユーザーリスト取得
	// (GET /users)
	GetUserList(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// ルートエンドポイント
// (GET /)
func (_ Unimplemented) GetRoot(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザーリスト取得
// (GET /users)
func (_ Unimplemented) GetUserList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoot(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserList operation middleware
func (siw *ServerInterfaceWrapper) GetUserList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetRoot)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUserList)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXW08bRxT+K9a0jyvblPTFb6natEhVhdLmqULVYo9hot2dzcwYlUaWMjuBkmIUFG5y",
	"m4oGIi7m0qi0BQqEH3NYbP+LasbGLPYWU8UVL31Bu8Oeb875zncufoyy1PWphz3BUeYxYpj71OPYvHxk",
	"5+7jRwXMhX7LUk9gzzzavu+QrC0I9VIPOfX0Gc+OYtfWTz6jPmaCNEByWNjEaT7yLCO+NkMZBGoWVAXU",
	"96COIdgHtQ5qD4INUJv6RO7WNveqv79BFiICu7wTOU+wk4vBjUCADCCYBrUAwao+UVugnoWzM8hCYtzH",
	"KIO4YMQbQUULuZhzewR3AoYT+2cnc9Ufn4KstMDDyYlw97ATp9g6ocMPcVagywObMXtcv2PGKLvOcfUK",
	"lILgyDBzEHsJw48KhOEcynzdxBvquFl/1855BYJf9UXBIagpkLvhyUp4/Bxk6exg5nxnFeQ6yLJ28h5l",
	"wySXw9475P7fB4q/tV3fweajFePqEQSH5xub9fIsyJLJ5w8g34L8CYK5XjIj57ReND8nxptDkFtRH0CW",
	"IZj+R0+KFhrwBGae7XyJ2Rhmn1zEfgvchZMTdbUBwR/mu1nzRasoStXyX9X5ZZBLxvslkMu95DFyadMN",
	"ud7l9qKFvqDiHi14udsS25W8l2pr0yBfg5z+r8TWXoYLEJRALt/IjaKFHnh2QYxSRr7Dt8VYrTJT29D5",
	"DE8namuy2Td6R1E8vv6uEY0JoMAx49884JjFBOfaxImbOq+agyBYAfUM1DYEuo3nKXNtgTJNu5j5QOJm",
	"jVoz3PwJ6njg4zgr7aJnu/h629iR1MYdyaEInNV0NJ5L4uVp5413BwcSecoSg5SJPHUITXxFqcMTnxWG",
	"9e1EmMzG/Ddxd3AAWWgMM95A6kumk2kdHvWxZ/sEZVB/si+ZRhbybTFqEpDSf0awiBPYvh71akmnQVba",
	"ZAbBi9rpvG63elof6/rQgtwz2foZgtfmeQqZy5lR+kAOZdCnWNynVCDr6hLzQTr9DiUSWQoutT+KGU4Q",
	"ntCBd8vaBcBNNH++sxoeHISnL6s785rcOw3X32c4jzLovdTlqpZqhZiKLGnGpK+7yZX2YYz6uxtd7gPG",
	"4k53i1ZPL1row5uEEjdATcUXXNdm46ZmukhC2CNc0z6CPcxsBw1p+5TpE9fKUffhSVC/gNyqlo/qpd8u",
	"evIayKdmhbws1os9wbTuplgb06wcJ0rdnj4nvMfCbIXUWo7juG32ylSkUXbso22CbQD/L9feyDWimgvJ",
	"hM8Xw7dLEa1qxrVQtamB0qftIj1/uV1dqFRfvAlXlJ4DzNGNSAifZ1Ip2yfJZntKZqmbGutDRasdob44",
	"rXeveASHZm1nlHKR6U+n0wZgqOVhO9LZwZPa1HbkB1FMITZmXqsOO92JclNfXKk/WdV1dT2aYao4VPw7",
	"AAD//xAKgB62DgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../responses.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
